#!/usr/bin/env python3

import os
import logging

logging.basicConfig(format="%(levelname)s:%(message)s", level=logging.WARNING)
_logger = logging.getLogger(__name__)

from src.action import Action
from src.response import Response
from src.message import Message
from src.node import get_node
from src.commons import send_message_to_head
from src.configuration import config
from src.display import print_nodes, print_jobs

from time import sleep

node = get_node()

def get_nodes():
    msg = Message(
        node_id=node.node_id,
        action=Action.FetchNodes,
        response=None,
        content=None)

    message, success = send_message_to_head(msg)

    if success and message is not None and message.response == Response.FetchSuccessful:
        _logger.debug(f"Registered with head node successfully. Proceeding.")
        nodes = message.content
        return nodes
    elif success:
        raise RuntimeError(f"Failed! {message}")
    else:
        raise RuntimeError(f"Could not successfully contact head node!")

def get_jobs():
    msg = Message(
        node_id=node.node_id,
        action=Action.FetchJobs,
        response=None,
        content=None)

    message, success = send_message_to_head(msg)

    if success and message is not None and message.response == Response.FetchSuccessful:
        _logger.debug(f"Registered with head node successfully. Proceeding.")
        jobs = message.content
        return jobs
    elif success:
        raise RuntimeError(f"Failed! {message}")
    else:
        raise RuntimeError(f"Could not successfully contact head node!")

if __name__ == "__main__":
    assert node.is_head(), f"cminfo should only be called from head node."

    nodes = get_nodes()
    jobs = get_jobs()
    print_nodes(nodes)
    print_jobs(jobs)

