#!/usr/bin/env python3

import argparse
import os
import logging
from typing import Any

logging.basicConfig(format="%(levelname)s:%(message)s", level=logging.WARNING)
_logger = logging.getLogger(__name__)

from src.mw.socket import RequestSocket, ReplySocket
from src.action import Action, get_action
from src.response import Response
from src.message import Message
from src.node import get_node
from src.user import User
from src.configuration import load_configuration

from time import sleep

def get_args():
    parser = argparse.ArgumentParser(description='CM Configuration Tool')
    parser.add_argument('entity',     help='choices: user, job, node.')
    parser.add_argument('action',     help='[user| create, remove, modify, show]')
    parser.add_argument('command',    nargs='+', help='command')
    args = parser.parse_args()
    return args

def get_last_uid():
    return 1000

def get_content(action: Action, command: list):
    if action == Action.CreateUser:
        uid = get_last_uid()
        username = None
        fullname = "User"
        if len(command) == 1:
            username = command[0]
        elif len(command) == 2:
            username = command[0]
            fullname = command[1]
        elif len(command) == 3:
            uid = command[0]
            username = command[1]
            fullname = command[2]
        else:
            raise ValueError(f"Expected either 1, 2, or 3 arguments to create user, got {len(command)}.")
        user = User(uid=uid, username=username, fullname=fullname)
        return user

if __name__ == "__main__":
    args = get_args()
    config = load_configuration()
    node = get_node(config)

    if node.is_head():
        action = get_action(entity=args.entity, action=args.action)
        content = get_content(action=action, command=args.command)
        head_sock = RequestSocket(hostname="0.0.0.0", port=config.rep_port)
        head_sock.open(node.master_addr, config.req_port)

        msg = Message(
            node_id=node.node_id,
            action=action,
            response=None,
            content=content)
        _logger.debug("Fetching node info")
        head_sock.send(msg)
        _logger.debug("Waiting for response")
        message = head_sock.receive()
        _logger.debug(f"Child received message: {message}")
        print(message)

    elif node.is_compute():
        raise NotImplementedError(f"comconfigure should only be called from head node.")

    else:
        raise NotImplementedError(f"Server type not recognized. This should not have happened!")
