#!/usr/bin/env python3

import os

from src.mw.socket import RequestSocket, ReplySocket
from src.response import Response
from src.node import get_node, setup_head_daemon, register_node
from src.configuration import load_configuration

import logging
from time import sleep

logging.basicConfig(format="%(levelname)s:%(message)s", level=logging.INFO)
_logger = logging.getLogger(__name__)

if __name__ == "__main__":
    config = load_configuration()
    node = get_node(config)
    None if not node.is_head() else setup_head_daemon(node)
    register_node(node=node, config=config)

    if node.is_head():
        from src.master.handler import handle_message
        # This is a head node
        _logger.info("Starting head node service.")
        sock = ReplySocket(hostname="0.0.0.0", port=config.req_port)
        sock.open()

        while True:
            _logger.info("Waiting for message")
            message = sock.receive()
            _logger.info(f"Head received message.")
            response = handle_message(node, message)
            _logger.info(f"Head handled message.")
            sock.send(response)
            _logger.info("Sent response.")

        sock.close()

    elif node.is_compute():
        from src.compute.handler import handle_message
        # This is a compute node
        _logger.info("Starting child node service.")

        head_sock = RequestSocket(hostname="0.0.0.0", port=config.rep_port)
        head_sock.open(node.master_addr, config.req_port)
        sock = ReplySocket(hostname="0.0.0.0", port=config.req_port)
        sock.open()

        while True:
            _logger.info("Waiting for message")
            message = sock.receive()
            _logger.info(f"Received message.")
            response = handle_message(node, message, head_sock)
            _logger.info(f"Handled message.")
            sock.send(response)
            _logger.info("Sent response.")

        head_sock.close()
        sock.close()

    else:
        raise NotImplementedError(f"Server type not recognized. This should not have happened!")
