#!/usr/bin/env python3

import os
import multiprocessing as mp
from multiprocessing import Process

from src.commons import lag
from src.mw.socket import RequestSocket, ReplySocket
from src.response import Response
from src.node import get_node, setup_head_daemon, register_node
from src.configuration import config

import logging

logging.basicConfig(format="%(levelname)s:%(message)s", level=logging.INFO)
_logger = logging.getLogger(__name__)


if __name__ == "__main__":
    node = get_node()
    None if not node.is_head() else setup_head_daemon(node)
    register_node(node=node)

    if node.is_head():
        # This is a head node
        _logger.info("Starting head node service.")
        from src.master.daemon import incoming_routine, scheduling_routine

        processes = [
            Process(target=incoming_routine, args=(node, )),
            Process(target=scheduling_routine, args=(node, )),
        ]

    elif node.is_compute():
        from src.compute.handler import handle_message
        # This is a compute node
        _logger.info("Starting child node service.")
        from src.compute.daemon import incoming_routine, scheduling_routine, status_routine

        processes = [
            Process(target=incoming_routine, args=(node, )),
            Process(target=scheduling_routine, args=(node, )),
            Process(target=status_routine, args=(node, )),
        ]

    else:
        raise NotImplementedError(f"Server type not recognized. This should not have happened!")

    # Start subprocesses
    for p in processes:
        p.start()

    # Lock on subprocesses
    for p in processes:
        p.join()
