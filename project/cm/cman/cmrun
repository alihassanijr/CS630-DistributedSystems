#!/usr/bin/env python3

import argparse
import os
import logging
from typing import Any

logging.basicConfig(format="%(levelname)s:%(message)s", level=logging.WARNING)
_logger = logging.getLogger(__name__)

from src.mw.socket import RequestSocket, ReplySocket
from src.action import Action, get_action
from src.response import Response
from src.resource import ResourceType, ResourceRequirement
from src.message import Message
from src.node import get_node
from src.job import Job
from src.commons import send_message_to_head, get_uid, get_workdir
from src.configuration import ENV, config

from time import sleep

node = get_node()


def get_args():
    parser = argparse.ArgumentParser(description='CM job execution tool')
    parser.add_argument('-a', '--alias',       type=str, default=None, help='Job name/alias')
    parser.add_argument('-n', '--nodes',       type=int, default=None, help='Number of nodes')
    parser.add_argument('-p', '--processes',   type=int, default=None, help='Number of processes per node')
    parser.add_argument('--num-cpus-per-node', type=int, default=None, help='Number of CPU cores per node')
    parser.add_argument('--mem-per-node',      type=int, default=None, help='Memory per node (MB)')
    parser.add_argument('-t', '--time-limit',  type=int, default=None, help='Time limit (hours)')
    parser.add_argument('command',    nargs='+', help='command')
    args = parser.parse_args()
    return args


def create_job(job):
    msg = Message(
        node_id=node.node_id,
        action=Action.AssignJobId,
        response=None,
        content=job)
    resp, success = send_message_to_head(msg)
    if success and resp is not None and resp.response == Response.AssignJobIdSuccessful:
        return resp.content
    else:
        details = "Could not contact head daemon successfully." if not success else f"Head daemon responded with {resp}"
        raise RuntimeError(f"Failed to assign job id! " + details)


def setup_job(args):
    n_nodes         = args.nodes             or config.default_n_nodes
    n_procs         = args.processes         or config.default_n_procs
    n_cpus_per_node = args.num_cpus_per_node or config.default_n_cpus_per_node
    mem_per_node    = args.mem_per_node      or config.default_mem_per_node
    time_limit      = args.time_limit        or config.default_time_limit
    command         = " ".join(args.command)
    working_dir     = get_workdir()
    env             = dict(ENV)

    job_name = args.alias or command.split(' ')[0]
    uid      = get_uid()
    resource_req = ResourceRequirement(
        n_nodes=n_nodes,
        n_per_node=n_procs,
        n_cpus_per_node=n_cpus_per_node,
        mem_per_node=mem_per_node)

    job = Job(
        job_id=None,
        job_name=job_name,
        uid=uid,
        command=command,
        working_dir=working_dir,
        env=env,
        resource_req=resource_req,
        time_limit=time_limit)
    return create_job(job).merge(job)

if __name__ == "__main__":
    args = get_args()

    if node.is_head():
        job = setup_job(args)
        if type(job) is Job:
            print(f"Job {job.job_id} started, pending resource allocation.")

    elif node.is_compute():
        raise NotImplementedError(f"cmrun should only be called from head node.")

    else:
        raise NotImplementedError(f"Server type not recognized. This should not have happened!")
