#!/usr/bin/env python3

import argparse
import os
import logging
from typing import Any

logging.basicConfig(format="%(levelname)s:%(message)s", level=logging.WARNING)
_logger = logging.getLogger(__name__)

from src.mw.socket import RequestSocket, ReplySocket
from src.action import Action, get_action
from src.response import Response
from src.resource import ResourceType, ResourceRequirement
from src.message import Message
from src.node import get_node
from src.job import Job
from src.commons import send_message_to_head
from src.configuration import config

from time import sleep

node = get_node()


def get_args():
    parser = argparse.ArgumentParser(description='CM job killer')
    parser.add_argument('job_id', type=int, default=None, help='Job id')
    args = parser.parse_args()
    return args


def kill_job(job_id):
    msg = Message(
        node_id=node.node_id,
        action=Action.KillJob,
        response=None,
        content=job_id)
    resp, success = send_message_to_head(msg)
    if success and resp is not None and resp.response == Response.KillSignalSent:
        return True
    if success and resp is not None and resp.response == Response.JobAlreadyDone:
        return False
    details = "Could not contact head daemon successfully." if not success else f"Head daemon responded with {resp}"
    raise RuntimeError(f"Failed to kill job id! " + details)

if __name__ == "__main__":
    args = get_args()

    if node.is_head():
        killed = kill_job(args.job_id)
        if killed:
            print(f"Kill signal sent to job {args.job_id}.")
        else:
            print(f"Couldn't kill job {args.job_id}; maybe it's already done?")


    elif node.is_compute():
        raise NotImplementedError(f"cmrun should only be called from head node.")

    else:
        raise NotImplementedError(f"Server type not recognized. This should not have happened!")
